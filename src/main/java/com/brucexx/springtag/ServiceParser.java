/**
 * Alipay.com Inc.
 * Copyright (c) 2004-2012 All Rights Reserved.
 */
package com.brucexx.springtag;

import org.apache.log4j.Logger;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanDefinitionStoreException;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.support.AbstractBeanDefinition;
import org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser;
import org.springframework.beans.factory.xml.ParserContext;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.util.StringUtils;
import org.w3c.dom.Element;

import com.brucexx.core.common.tagbean.ServiceModel;
import com.brucexx.core.common.tagbean.TagModelCache;

/**
 * 
 * @author zhao.xiong
 * @version $Id: ServiceParser.java, v 0.1 2012-5-24 ÏÂÎç03:41:17 zhao.xiong Exp $
 */
public class ServiceParser extends AbstractSimpleBeanDefinitionParser {

    private static Logger logger = Logger.getLogger("aries-config");

    @SuppressWarnings("rawtypes")
    protected Class getBeanClass(Element element) {
        String _interface = element.getAttribute("interface");
        try {
            return Class.forName(_interface);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    private static int n = 0;

    protected String resolveId(Element element, AbstractBeanDefinition definition,
                               ParserContext parserContext) throws BeanDefinitionStoreException {
        String service = element.getAttribute("ref");
        String _interface = element.getAttribute("interface");
        String protocol = element.getAttribute("protocol");

        ServiceModel sm = new ServiceModel();
        sm.setService(service);
        sm.setInterface(_interface);
        sm.setProtocol(protocol);

        TagModelCache.putService(sm);

        logger.info("register service ==>id[" + service + "],[" + _interface + "],protocol["
                    + protocol + "]");

        String id = super.resolveId(element, definition, parserContext);

        if (StringUtils.hasText(id))
            return id;
        return "autoGeneratedPropertyBeanId_" + n++;
    }

}
